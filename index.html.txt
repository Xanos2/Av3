<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Avatar Interface</title>
    <style>
        :root {
            --primary-color: #4a6fa5;
            --secondary-color: #6c8fc7;
            --background-color: #f5f7fa;
            --text-color: #333;
            --shadow-color: rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--background-color);
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            color: var(--text-color);
        }

        .container {
            max-width: 800px;
            margin: 2rem auto;
            width: 90%;
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }

        .avatar-container {
            display: flex;
            justify-content: center;
            margin-bottom: 2rem;
        }

        .avatar {
            width: 200px;
            height: 200px;
            position: relative;
            border-radius: 50%;
            background: linear-gradient(135deg, #e0e8ff, #c9d6ff);
            box-shadow: 0 10px 20px var(--shadow-color);
            overflow: hidden;
        }

        .avatar-head {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            overflow: hidden;
        }

        .avatar-face {
            position: absolute;
            width: 70%;
            height: 70%;
            top: 15%;
            left: 15%;
            background-color: #ffe8d6;
            border-radius: 50%;
        }

        .avatar-eyes {
            position: absolute;
            width: 100%;
            top: 40%;
            display: flex;
            justify-content: space-around;
        }

        .avatar-eye {
            width: 12px;
            height: 16px;
            background-color: #2d3748;
            border-radius: 50%;
            position: relative;
            animation: blink 4s infinite;
        }

        .avatar-eye::before {
            content: '';
            position: absolute;
            width: 4px;
            height: 4px;
            background-color: white;
            border-radius: 50%;
            top: 3px;
            left: 3px;
        }

        .avatar-mouth {
            position: absolute;
            width: 30px;
            height: 10px;
            background-color: #c53030;
            border-radius: 10px;
            bottom: 30%;
            left: 50%;
            transform: translateX(-50%);
            transition: all 0.3s ease;
        }

        .avatar-mouth.speaking {
            height: 15px;
            animation: speak 0.5s infinite alternate;
        }

        .avatar-hair {
            position: absolute;
            width: 110%;
            height: 50%;
            top: -5%;
            left: -5%;
            background-color: #2d3748;
            border-radius: 50% 50% 0 0;
        }

        .avatar-ears {
            position: absolute;
            width: 100%;
            top: 45%;
        }

        .avatar-ear {
            width: 16px;
            height: 30px;
            background-color: #ffe8d6;
            border-radius: 50%;
            position: absolute;
        }

        .avatar-ear:first-child {
            left: -5px;
        }

        .avatar-ear:last-child {
            right: -5px;
        }

        .avatar-neck {
            position: absolute;
            width: 30px;
            height: 20px;
            background-color: #ffe8d6;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
        }

        .avatar-status {
            width: 15px;
            height: 15px;
            background-color: #38a169;
            border-radius: 50%;
            position: absolute;
            right: 10px;
            bottom: 10px;
            box-shadow: 0 0 10px #38a169;
        }

        .chat-container {
            background-color: white;
            border-radius: 10px;
            padding: 1rem;
            box-shadow: 0 5px 15px var(--shadow-color);
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }

        .chat-messages {
            flex-grow: 1;
            overflow-y: auto;
            padding: 1rem;
            max-height: 300px;
        }

        .message {
            margin-bottom: 1rem;
            padding: 0.75rem;
            border-radius: 8px;
            max-width: 80%;
        }

        .user-message {
            background-color: var(--primary-color);
            color: white;
            align-self: flex-end;
            margin-left: auto;
        }

        .ai-message {
            background-color: #e2e8f0;
            align-self: flex-start;
        }

        .chat-input {
            display: flex;
            padding: 1rem 0;
        }

        .chat-input input {
            flex-grow: 1;
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 5px;
            margin-right: 0.5rem;
            font-size: 1rem;
        }

        .chat-input button {
            padding: 0.75rem 1.5rem;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s;
        }

        .chat-input button:hover {
            background-color: var(--secondary-color);
        }

        .avatar-mood {
            position: absolute;
            width: 100%;
            text-align: center;
            bottom: -30px;
            font-size: 0.875rem;
            font-weight: bold;
            color: var(--primary-color);
        }

        .api-key-container {
            margin-bottom: 1rem;
        }

        .api-key-container input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 5px;
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }

        .settings-btn {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--primary-color);
        }

        .settings-panel {
            position: absolute;
            top: 3.5rem;
            right: 1rem;
            background-color: white;
            border-radius: 5px;
            padding: 1rem;
            box-shadow: 0 5px 15px var(--shadow-color);
            display: none;
        }

        .settings-panel.visible {
            display: block;
        }

        .loading-indicator {
            margin: 0 auto;
            text-align: center;
            display: none;
        }

        .loading-indicator.visible {
            display: block;
        }

        .dot {
            display: inline-block;
            width: 8px;
            height: 8px;
            margin: 0 3px;
            background-color: var(--primary-color);
            border-radius: 50%;
            animation: dot-pulse 1.5s infinite ease-in-out;
        }

        .dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes blink {
            0%, 45%, 55%, 100% {
                transform: scaleY(1);
            }
            50% {
                transform: scaleY(0.1);
            }
        }

        @keyframes speak {
            0% {
                height: 5px;
                width: 30px;
            }
            100% {
                height: 15px;
                width: 25px;
                border-radius: 50%;
            }
        }

        @keyframes dot-pulse {
            0%, 100% {
                transform: scale(0.7);
                opacity: 0.5;
            }
            50% {
                transform: scale(1);
                opacity: 1;
            }
        }

        @media (max-width: 600px) {
            .container {
                margin: 1rem auto;
            }
            
            .avatar {
                width: 150px;
                height: 150px;
            }
            
            .message {
                max-width: 90%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="avatar-container">
            <div class="avatar">
                <div class="avatar-head">
                    <div class="avatar-hair"></div>
                    <div class="avatar-ears">
                        <div class="avatar-ear"></div>
                        <div class="avatar-ear"></div>
                    </div>
                    <div class="avatar-face">
                        <div class="avatar-eyes">
                            <div class="avatar-eye"></div>
                            <div class="avatar-eye"></div>
                        </div>
                        <div class="avatar-mouth"></div>
                    </div>
                    <div class="avatar-neck"></div>
                </div>
                <div class="avatar-status"></div>
                <div class="avatar-mood">Ready to assist</div>
            </div>
        </div>

        <div class="api-key-container">
            <label for="api-key">AI API Key:</label>
            <input type="password" id="api-key" placeholder="Enter your API key">
        </div>

        <div class="chat-container">
            <div class="chat-messages" id="chat-messages">
                <div class="message ai-message">
                    Hello! I'm your AI assistant. How can I help you today?
                </div>
            </div>
            
            <div class="loading-indicator" id="loading-indicator">
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
            </div>
            
            <div class="chat-input">
                <input type="text" id="user-input" placeholder="Type your message here...">
                <button id="send-btn">Send</button>
            </div>
        </div>
    </div>

    <button class="settings-btn" id="settings-btn">⚙️</button>
    <div class="settings-panel" id="settings-panel">
        <div>
            <label for="baseUrl">API Base URL:</label>
            <input type="text" id="baseUrl" value="https://api.openai.com/v1" style="width: 100%; margin-bottom: 10px;">
        </div>
        <div>
            <label for="model">Model:</label>
            <input type="text" id="model" value="gpt-3.5-turbo" style="width: 100%;">
        </div>
    </div>

    <script>
        // AI Connector Class from the previous artifact
        class AIConnector {
            constructor(apiKey, baseUrl = 'https://api.openai.com/v1') {
                this.apiKey = apiKey;
                this.baseUrl = baseUrl;
                this.defaultHeaders = {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`
                };
            }

            async getCompletion(prompt, options = {}) {
                const endpoint = '/chat/completions';
                const defaultParams = {
                    model: "gpt-3.5-turbo",
                    messages: [
                        {
                            role: "user",
                            content: prompt
                        }
                    ],
                    temperature: 0.7,
                    max_tokens: 150
                };

                const params = { ...defaultParams, ...options };
                
                try {
                    const response = await fetch(`${this.baseUrl}${endpoint}`, {
                        method: 'POST',
                        headers: this.defaultHeaders,
                        body: JSON.stringify(params)
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`API error: ${errorData.error?.message || response.statusText}`);
                    }

                    return await response.json();
                } catch (error) {
                    console.error('Error connecting to AI API:', error);
                    throw error;
                }
            }
        }

        // Avatar and Chat Interface Controller
        class AvatarInterface {
            constructor() {
                this.aiConnector = null;
                this.messages = [];
                this.isProcessing = false;
                
                // DOM Elements
                this.messageContainer = document.getElementById('chat-messages');
                this.userInput = document.getElementById('user-input');
                this.sendButton = document.getElementById('send-btn');
                this.apiKeyInput = document.getElementById('api-key');
                this.avatarMouth = document.querySelector('.avatar-mouth');
                this.avatarMood = document.querySelector('.avatar-mood');
                this.loadingIndicator = document.getElementById('loading-indicator');
                this.settingsBtn = document.getElementById('settings-btn');
                this.settingsPanel = document.getElementById('settings-panel');
                this.baseUrlInput = document.getElementById('baseUrl');
                this.modelInput = document.getElementById('model');
                
                this.initEventListeners();
            }
            
            initEventListeners() {
                this.sendButton.addEventListener('click', () => this.sendMessage());
                this.userInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.sendMessage();
                });
                
                this.apiKeyInput.addEventListener('change', () => {
                    const apiKey = this.apiKeyInput.value.trim();
                    if (apiKey) {
                        this.initializeAI(apiKey);
                    }
                });
                
                this.settingsBtn.addEventListener('click', () => {
                    this.settingsPanel.classList.toggle('visible');
                });
                
                this.baseUrlInput.addEventListener('change', () => {
                    if (this.aiConnector) {
                        this.initializeAI(this.apiKeyInput.value.trim());
                    }
                });
                
                // Load API key from localStorage if available
                const savedApiKey = localStorage.getItem('aiApiKey');
                if (savedApiKey) {
                    this.apiKeyInput.value = savedApiKey;
                    this.initializeAI(savedApiKey);
                }
            }
            
            initializeAI(apiKey) {
                const baseUrl = this.baseUrlInput.value.trim();
                this.aiConnector = new AIConnector(apiKey, baseUrl);
                localStorage.setItem('aiApiKey', apiKey);
                this.setStatus('connected');
                this.setMood('Ready to assist');
            }
            
            async sendMessage() {
                if (this.isProcessing) return;
                
                const message = this.userInput.value.trim();
                if (!message) return;
                
                if (!this.aiConnector) {
                    this.addMessage('Please enter your API key first.', 'ai');
                    return;
                }
                
                this.addMessage(message, 'user');
                this.userInput.value = '';
                
                this.isProcessing = true;
                this.setStatus('thinking');
                this.setLoading(true);
                
                try {
                    const fullMessages = this.messages.map(m => ({
                        role: m.role === 'user' ? 'user' : 'assistant',
                        content: m.content
                    }));
                    
                    const response = await this.aiConnector.getCompletion('', {
                        messages: fullMessages,
                        model: this.modelInput.value.trim()
                    });
                    
                    const aiResponse = response.choices[0].message.content;
                    
                    this.setStatus('speaking');
                    this.speakResponse(aiResponse);
                } catch (error) {
                    this.addMessage(`Error: ${error.message}`, 'ai');
                    this.setStatus('error');
                    this.setMood('Something went wrong');
                    this.isProcessing = false;
                    this.setLoading(false);
                }
            }
            
            speakResponse(response) {
                this.avatarMouth.classList.add('speaking');
                
                // Simulate typing effect
                let i = 0;
                let tempResponse = '';
                const typingSpeed = 30; // milliseconds per character
                
                const typeWriter = () => {
                    if (i < response.length) {
                        tempResponse += response.charAt(i);
                        this.updateAIMessage(tempResponse);
                        i++;
                        setTimeout(typeWriter, typingSpeed);
                    } else {
                        this.finishSpeaking();
                    }
                };
                
                this.addMessage('', 'ai');
                typeWriter();
            }
            
            updateAIMessage(text) {
                const lastMessage = this.messageContainer.lastElementChild;
                if (lastMessage && lastMessage.classList.contains('ai-message')) {
                    lastMessage.textContent = text;
                }
            }
            
            finishSpeaking() {
                this.avatarMouth.classList.remove('speaking');
                this.setStatus('idle');
                this.setMood('Ready to assist');
                this.isProcessing = false;
                this.setLoading(false);
            }
            
            addMessage(message, sender) {
                const messageObj = {
                    content: message,
                    role: sender
                };
                
                this.messages.push(messageObj);
                
                const messageElement = document.createElement('div');
                messageElement.classList.add('message');
                messageElement.classList.add(sender === 'user' ? 'user-message' : 'ai-message');
                messageElement.textContent = message;
                
                this.messageContainer.appendChild(messageElement);
                this.scrollToBottom();
            }
            
            scrollToBottom() {
                this.messageContainer.scrollTop = this.messageContainer.scrollHeight;
            }
            
            setStatus(status) {
                const statusIndicator = document.querySelector('.avatar-status');
                
                switch (status) {
                    case 'idle':
                        statusIndicator.style.backgroundColor = '#38a169';
                        statusIndicator.style.boxShadow = '0 0 10px #38a169';
                        break;
                    case 'thinking':
                        statusIndicator.style.backgroundColor = '#d69e2e';
                        statusIndicator.style.boxShadow = '0 0 10px #d69e2e';
                        break;
                    case 'speaking':
                        statusIndicator.style.backgroundColor = '#3182ce';
                        statusIndicator.style.boxShadow = '0 0 10px #3182ce';
                        break;
                    case 'connected':
                        statusIndicator.style.backgroundColor = '#38a169';
                        statusIndicator.style.boxShadow = '0 0 10px #38a169';
                        break;
                    case 'error':
                        statusIndicator.style.backgroundColor = '#e53e3e';
                        statusIndicator.style.boxShadow = '0 0 10px #e53e3e';
                        break;
                    default:
                        statusIndicator.style.backgroundColor = '#718096';
                        statusIndicator.style.boxShadow = '0 0 10px #718096';
                }
            }
            
            setMood(mood) {
                this.avatarMood.textContent = mood;
            }
            
            setLoading(isLoading) {
                if (isLoading) {
                    this.loadingIndicator.classList.add('visible');
                } else {
                    this.loadingIndicator.classList.remove('visible');
                }
            }
        }

        // Initialize the avatar interface when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            const avatarInterface = new AvatarInterface();
        });
    </script>
</body>
</html>